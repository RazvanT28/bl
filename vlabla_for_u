#include <iostream>
#include <string>
#include <limits>
#include <math.h>
#include <iomanip>
#include <limits>


//Clasa de Baza
class PlatitorTaxe {

    //Date membre
protected:
    std::string tip_entitate="";
    std::string nume="";
    int suma_in=0;//suma incasata in 2021
    int suma_n=0;// Suma care nu este taxabilă din suma încasată

    //Constructor
public:

    //Conctructor Gol
    PlatitorTaxe() {}


    //Constructoru cu Lista de Initializare
    PlatitorTaxe(std::string tip_entitate, std::string nume, int suma_in, int suma_n) : tip_entitate(tip_entitate), nume(nume), suma_in(suma_in), suma_n(suma_n) {}


    //Functii
public:

    //Setters si Getters
    virtual std::string get_nume() { return this->nume; }
   int get_suma_in() 
   {
       return this->suma_in;
 }

    //Alte Functii
    virtual void afisare() {
        std::cout << nume << std::endl;
        std::cout << suma_in << std::endl;
    }

    virtual void taxe(int p_pers, int p_firma) {}
};


//Clasa Derivata din Baza
class PersoanaFizica : public PlatitorTaxe {

    //Date membre
private:


    //Constructor
public:

    //Conctructor Gol
    PersoanaFizica() {}


    //Constructoru cu Lista de Initializare
    PersoanaFizica(std::string tip_entitate, std::string nume, int suma_in, int suma_n) : PlatitorTaxe(tip_entitate, nume, suma_in, suma_n) {}


    //Functii
public:

    //Setters si Getters


    //Alte Functii
    void afisare() { 
        std::cout << nume << "\n" << suma_in << std::endl;
  
    
    }

    void taxe(int p_pers, int p_firma) {

        

        if (tip_entitate == "Persoana Fizica") {
            int calcul = (suma_in - suma_n) * (100 - p_pers) / 100;
            std::cout << nume << std::endl;
            std::cout << calcul << std::endl;
        }

        if (tip_entitate == "Firma") {
            int calcul = (suma_in - suma_n) * (100 - p_firma) / 100;
            std::cout << nume << std::endl;
            std::cout << calcul << std::endl;
        }
       
    }

};


//Clasa Derivata din Baza
class Firma : public PlatitorTaxe {

    //Date membre
private:


    //Constructor
public:

    //Conctructor Gol
    Firma() {}


    //Constructoru cu Lista de Initializare
    Firma(std::string tip_entitate, std::string nume, int suma_in, int suma_n) : PlatitorTaxe(tip_entitate, nume, suma_in, suma_n) {}


    //Functii
public:

    //Setters si Getters


    //Alte Functii
    void afisare() { 
   

        std::cout << nume << "\n" << suma_in << std::endl; 
    }

    void taxe(int p_pers, int p_firma) {



        if (tip_entitate == "Persoana Fizica") {
            int calcul = (suma_in - suma_n) * (100 - p_pers) / 100;
            std::cout << nume << std::endl;
            std::cout << calcul << std::endl;
        }

        if (tip_entitate == "Firma") {
            int calcul = (suma_in - suma_n) * (100 - p_firma) / 100;
            std::cout << nume << std::endl;
            std::cout << calcul << std::endl;
        }

    }

};




//Clasa
class AgentieAdministrareFiscala {

};



//Functia main
int main()
{

    std::string tip_entitate;
    std::string nume;
    int suma_in;
    int suma_n;




    int optiune;
    std::cin >> optiune;

    int numar_entitati;
    std::cin >> numar_entitati;

    //Facem Array de Obiecte (Toate pot sa fie de o clasa diferita)
        //Folosim Alocare Dinamica

    PlatitorTaxe** platitor_array = nullptr;
    platitor_array = new PlatitorTaxe * [numar_entitati];

    int k = 0; //Variabila de lucru care pune pe pozitii


    //Generam fiecare obiect
    for (int i = 0; i < numar_entitati; i++) {

        std::cin >> tip_entitate;
        std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
        std::getline(std::cin, nume);
        std::cin >> suma_in;
        std::cin >> suma_n;

        if (tip_entitate == "Persoana Fizica") {
            *(platitor_array + (k++)) = new PersoanaFizica(tip_entitate, nume, suma_in, suma_n);
        }

        if (tip_entitate == "Firma") {
            *(platitor_array + (k++)) = new Firma(tip_entitate, nume, suma_in, suma_n);
        }


    }

    //Optiune 1
 
    if (optiune == 1) {

        for (int i = 0; i < numar_entitati; i++) {
            (*(platitor_array + i))->afisare();
        }
    }


    //Optiune 2
    if (optiune == 2) {

        int p_pers;
        int p_firma;
        std::cin >> p_pers;
        std::cin >> p_firma;



        for (int i = 0; i < numar_entitati; i++) {
            (*(platitor_array + i))->taxe(p_pers, p_firma);

        }

    }

    //Optiune 3
    if (optiune == 3) {

    }


    //Optiune 4
    if (optiune == 4) {

    }


    return 0;
}
